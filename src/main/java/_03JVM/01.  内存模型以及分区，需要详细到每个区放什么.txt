1.  内存模型以及分区，需要详细到每个区放什么。

JVM  分为堆区和栈区，还有方法区，初始化的对象放在堆里面，引用放在栈里面，class
类信息常量池（static 常量和 static 变量）等放在方法区
new:
 方法区：主要是存储类信息，常量池（static 常量和 static 变量），编译后的代码（字 节码）等数据
 堆：初始化的对象，成员变量 （那种非 static 的变量），所有的对象实例和数组都要 在堆上分配
 栈：栈的结构是栈帧组成的，调用一个方法就压入一帧，帧上面存储局部变量表，操作 数栈，方法出口等信息，局部变量表存放的是 8 大基础类型加上一个应用类型，所以还 是一个指向地址的指针
	本地方法栈：主要为 Native 方法服务
	程序计数器：记录当前线程执行的行号



java 虚拟机主要分为以下一个区:

方法区：

1. 有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生 GC，在这里进 行的 GC 主要是对方法区里的常量池和对类型的卸载
2. 方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后
的代码等数据。

3. 该区域是被线程共享的。

4. 方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池 具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池 中。
虚拟机栈:

1. 虚拟机栈也就是我们平常所称的栈内存,它为 java 方法服务，每个方法在执行的时候都会 创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。
2. 虚拟机栈是线程私有的，它的生命周期与线程相同。

3. 局部变量表里存储的是基本数据类型、returnAddress 类型（指向一条字节码指令的地 址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对 象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定 4.操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引 来访问，而是压栈和出栈的方式 5.每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支 持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引 用。
本地方法栈

本地方法栈和虚拟机栈类似，只不过本地方法栈为 Native 方法服务。
堆

java 堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这 里创建，因此该区域经常发生垃圾回收操作。
程序计数器 内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指 令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区
域是唯一一个 java 虚拟机规范没有规定任何 OOM 情况的区域。