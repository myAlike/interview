12.如和判断一个对象是否存活?(或者 GC 对象的判定方法)
判断一个对象是否存活有两种方法:
1. 引用计数法
所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，
就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对
象没有被引用，也就是“死对象”,将会被垃圾回收.
引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象 A 引用对象 B，对象 B
又引用者对象 A，那么此时 A,B 对象的引用计数器都不为零，也就造成无法完成垃圾回收，
所以主流的虚拟机都没有采用这种算法。
2.可达性算法(引用链法)

该算法的思想是：从一个被称为 GC Roots 的对象开始向下搜索，如果一个对象到 GC Roots
没有任何引用链相连时，则说明此对象不可用。
在 java 中可以作为 GC Roots 的对象有以下几种:
	虚拟机栈中引用的对象
	方法区类静态属性引用的对象
	方法区常量池引用的对象
	本地方法栈 JNI 引用的对象 虽然这些算法可以判定一个对象是否能被回收，但是当满足
上述条件时，一个对象比不一定 会被回收。当一个对象不可达 GC Root 时，这个对象并
不会立马被回收，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记 如果对象在
可达性分析中没有与 GC Root 的引用链，那么此时就会被第一次标记并且进行 一次筛选，
筛选的条件是是否有必要执行 finalize()方法。当对象没有覆盖 finalize()方法或 者已
被虚拟机调用过，那么就认为是没必要的。
如果该对象有必要执行 finalize()方法，那么这个对象将会放在一个称为 F-Queue 的对队列
中，虚拟机会触发一个  Finalize()线程去执行，此线程是低优先级的，并且虚拟机不会承诺
一直等待它运行完，这是因为如果  finalize()执行缓慢或者发生了死锁，那么就会造成
F-Queue 队列一直等待，造成了内存回收系统的崩溃。GC 对处于 F-Queue 中的对象进行
第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。