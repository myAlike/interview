1、面向对象的特征有哪些方面? 【基础】
答：面向对象的特征主要有以下几个方面：
1)抽象：抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象,二是数据抽象。
2)继承：继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。
3)封装：封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象,这些对象通过一个受保护的接口访问其他对象。
4)多态性：多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。





计算机软件系统是现实生活中的业务在计算机中的映射，而现实生活中的业务其实就是一个
个对象协作的过程。面向对象编程就是按现实业务一样的方式将程序代码按一个个对象进行
组织和编写，让计算机系统能够识别和理解用对象方式组织和编写的程序代码，这样就可以
把现实生活中的业务对象映射到计算机系统中。
面向对象的编程语言有，吗等4个主要的特征。
封装：
封装是保证软件部件具有优良的模块性的基础，封装的目标就是要实现软件部件的“高内聚、
低耦合”，防止程序相互依赖性而带来的变动影响。在面向对象的编程语言中，对象是封装
的最基本单位，面向对象的封装比传统语言的封装更为清晰、更为有力。面向对象的封装就
是把描述一个对象的属性和行为的代码封装在一个“模块”中，也就是一个类中，属性用变量定义，
行为用方法进行定义，方法可以直接访问同一个对象中的属性。通常情况下，只要记
住让变量和访问这个变量的方法放在一起，将一个类中的成员变量全部定义成私有的，只
有这个类自己的方法才可以访问到这些成员变量，这就基本上实现对象的封装，就很容易
找出要分配到这个类上的方法了，就基本上算是会面向对象的编程了。把握一个原则：把
对同一事物进行操作的方法和相关的方法放在同一个类中，把方法和它操作的数据放在同
一个类中。
例如，人要在黑板上画圆，这一共涉及三个对象：人、黑板、圆，画圆的方法要分配给哪个
对象呢？由于画圆需要使用到圆心和半径，圆心和半径显然是圆的属性，如果将它们在类中
定义成了私有的成员变量，那么，画圆的方法必须分配给圆，它才能访问到圆心和半径这两
个属性，人以后只是调用圆的画圆方法、表示给圆发给消息而已，画圆这个方法不应该分配
在人这个对象上，这就是面向对象的封装性，即将对象封装成一个高度自治和相对封闭的
个体，对象状态（属性）由这个对象自己的行为（方法）来读取和改变。一个更便于理解
的例子就是，司机将火车刹住了，刹车的动作是分配给司机，还是分配给火车，显然，应该
分配给火车，因为司机自身是不可能有那么大的力气将一个火车给停下来的，只有火车自己
才能完成这一动作，火车需要调用内部的离合器和刹车片等多个器件协作才能完成刹车这个
动作，司机刹车的过程只是给火车发了一个消息，通知火车要执行刹车动作而已。

抽象：
抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些
事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与
当前目标有关的方面。例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是
抽象。抽象包括行为抽象和状态抽象两个方面。例如，定义一个 Person 类，如下：
class Person {
	String name;
	int age;
}
人本来是很复杂的事物，有很多方面，但因为当前系统只需要了解人的姓名和年龄，所以上
面定义的类中只包含姓名和年龄这两个属性，这就是一种抽像，使用抽象可以避免考虑一些
与目标无关的细节。我对抽象的理解就是不要用显微镜去看一个事物的所有方面，这样涉及
的内容就太多了，而是要善于划分问题的边界，当前系统需要什么，就只考虑什么。

继承：
在定义和实现一个类的时候，可以在一个已经存在的类的基础之上来进行，把这个已经存在
的类所定义的内容作为自己的内容，并可以加入若干新的内容，或修改原来的方法使之更适
合特殊的需要，这就是继承。继承是子类自动共享父类数据和方法的机制，这是类之间的一
种关系，提高了软件的可重用性和可扩展性。

多态：
多态是指程序中定义的引用变量所指向的具体类型和通过该引用变量发出的方法调用在编
程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，
该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。
因为在程序运行时才确定具体的类，这样，不用修改源程序代码，就可以让引用变量绑定到
各种不同的类实现上，从而导致该引用调用的具体方法随之改变，即不修改程序代码就可以
改变程序运行时所绑定的具体代码，让程序可以选择多个运行状态，这就是多态性。多态性
增强了软件的灵活性和扩展性。例如，下面代码中的 UserDao 是一个接口，它定义引用变
量 userDao 指向的实例对象由 daofactory.getDao()在执行的时候返回，有时候指向的是
UserJdbcDao 这个实现，有时候指向的是 UserHibernateDao 这个实现，这样，不用修改
源代码，就可以改变 userDao 指向的具体类实现，从而导致 userDao.insertUser()方法调用
的具体代码也随之改变，即有时候调用的是 UserJdbcDao 的 insertUser 方法，有时候调用
的是 UserHibernateDao 的 insertUser 方法：
UserDao userDao =daofactory.getDao();
userDao.insertUser(user);

比喻：人吃饭，你看到的是左手，还是右手？