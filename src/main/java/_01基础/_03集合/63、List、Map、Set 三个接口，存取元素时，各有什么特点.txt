63、List、Map、Set 三个接口，存取元素时，各有什么特点？
这样的题属于随意发挥题：这样的题比较考水平，两个方面的水平：一是要真正明白这些内
容，二是要有较强的总结和表述能力。如果你明白，但表述不清楚，在别人那里则等同于不
明白。

首先，List 与 Set 具有相似性，它们都是单列元素的集合，所以，它们有一个功共同的父接口，叫 Collection。Set 里面不允许有重复的元素，所谓重复，即不能有两个相等（注意，
不是仅仅是相同）的对象，即假设 Set 集合中有了一个 A 对象，现在我要向 Set 集合再存入一个 B 对象，但 B 对象与 A 对象 equals 相等，则 B 对象存储不进去，所以，Set 集合的add 方法有一个 boolean 的返回值，当集合中没有某个元素，此时 add 方法可成功加入该元素时，则返回 true，当集合含有与某个元素 equals 相等的元素时，此时 add 方法无法加入该元素，返回结果为 false。Set 取元素时，没法说取第几个，只能以 Iterator 接口取得所有的元素，再逐一遍历各个元素。
 List 表示有先后顺序的集合，注意，不是那种按年龄、按大小、按价格之类的排序。
当我们多次调用 add(Obj e)方法时，每次加入的对象就像火车站买票有排队顺序一样，按先
来后到的顺序排序。有时候，也可以插队，即调用 add(int index,Obj e)方法，就可以指定当
前对象在集合中的存放位置。一个对象可以被反复存储进 List 中，每调用一次 add 方法，
这个对象就被插入进集合中一次，其实，并不是把这个对象本身存储进了集合中，而是在集
合中用一个索引变量指向这个对象，当这个对象被 add 多次时，即相当于集合中有多个索
引指向了这个对象，如图 x 所示。List 除了可以以 Iterator 接口取得所有的元素，再逐一遍历各个元素之外，还可以调用 get(index i)来明确说明取第几个。
 Map 与 List 和 Set 不同，它是双列的集合，其中有 put 方法，定义如下：put(obj
key,objvalue)，每次存储时，要存储一对 key/value，不能存储重复的 key，这个重复的规
则也是按 equals 比较相等。取则可以根据 key 获得相应的 value，即 get(Object key)返回
值为 key 所对应的 value。另外，也可以获得所有的 key 的结合，还可以获得所有的 value
的结合，还可以获得 key 和 value 组合成的 Map.Entry 对象的集合。

List 以特定次序来持有元素，可有重复元素。Set 无法拥有重复元素,内部排序。Map 保存
key-value 值，value 可多值。


HashSet 按照 hashcode 值的某种运算方式进行存储，而不是直接按 hashCode 值的大小进
行存储。例如，"abc"---> 78，"def" ---> 62，"xyz" ---> 65在 hashSet 中的存储顺序不是
62,65,78，这些问题感谢以前一个叫崔健的学员提出，最后通过查看源代码给他解释清楚，
看本次培训学员当中有多少能看懂源码。LinkedHashSet 按插入的顺序存储，那被存储对象
的 hashcode 方法还有什么作用呢？学员想想!hashset 集合比较两个对象是否相等，首先看
hashcode 方法是否相等，然后看 equals 方法是否相等。new 两个 Student 插入到 HashSet
中，看 HashSet 的 size，实现 hashcode 和 equals 方法后再看 size。

同一个对象可以在 Vector 中加入多次。往集合里面加元素，相当于集合里用一根绳子连接
到了目标对象。往 HashSet 中却加不了多次的。