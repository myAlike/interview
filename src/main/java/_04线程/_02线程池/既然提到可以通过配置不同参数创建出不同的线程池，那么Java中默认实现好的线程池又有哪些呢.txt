问题四：既然提到可以通过配置不同参数创建出不同的线程池，那么Java中默认实现好的线程池又有哪些呢？请比较它们的异同。
1..SingleThreadExecutor线程池

任务。如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代

它。此线程池保证所有任务的执行顺序按照任务的提交顺序执行。

	corePoolSize：1，只有一个核心线程在工作。

maximumPoolSize：1。

keepAliveTime：0L。

workQueue：newLinkedBlockingQueue<Runnable>()，其缓冲队列是无界的。
2..FixedThreadPool线程池

FixedThreadPool是固定大小的线程池，只有核心线程。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。
FixedThreadPool多数针对一些很稳定很固定的正规并发线程，多用于服务器。
corePoolSize：nThreads

maximumPoolSize：nThreads

keepAliveTime：0L

是无界的。

3..CachedThreadPool线程池

CachedThreadPool是无界线程池，如果线程池的大小超过了处理任务所需要的线程，那么就会回收部分空闲（60秒不执行任务）线程，当任务数增加时，此线程池又可以智能的添加新线程来处理任务。
线程池大小完全依赖于操作系统（或者说JVM）能够创建的最大线程大小。SynchronousQueue是一个是缓冲区为1的阻塞队列。
缓存型池子通常用于执行一些生存期很短的异步型任务，因此在一些面向

连接的daemon型SERVER中用得不多。但对于生存期短的异步任务，它是Executor的首选。
corePoolSize：0

maximumPoolSize：Integer.MAX_VALUE

keepAliveTime：60L

workQueue：newSynchronousQueue<Runnable>()，一个是缓冲区为1的阻塞队列。
4..ScheduledThreadPool线程池

ScheduledThreadPool：核心线程池固定，大小无限的线程池。此线程池支持定时以及周期性执行任务的需求。创建一个周期性执行任务的线程
回收。

corePoolSize：corePoolSize

maximumPoolSize：Integer.MAX_VALUE

keepAliveTime：DEFAULT_KEEPALIVE_MILLIS

workQueue：newDelayedWorkQueue()
