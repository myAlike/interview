50) 写出 3 条你遵循的多线程最佳实践
这种问题我最喜欢了， 我相信你在写并发代码来提升性能的时候也会遵循某些最佳实践。 以
下三条最佳实践我觉得大多数 Java 程序员都应该遵循：
给你的线程起个有意义的名字。
这样可以方便找 bug 或追踪。 OrderProcessor, QuoteProcessor or TradeProcessor 这
种名字比 Thread-1. Thread-2 and Thread-3 好多了，给线程起一个和它要完成的任务相
关的名字，所有的主要框架甚至 JDK 都遵循这个最佳实践。
避免锁定和缩小同步的范围
锁花费的代价高昂且上下文切换更耗费时间空间， 试试最低限度的使用同步和锁， 缩小临界
区。因此相对于同步方法我更喜欢同步块，它给我拥有对锁的绝对控制权。
多用同步类少用 wait 和 notify
首先， CountDownLatch, Semaphore, CyclicBarrier 和 Exchanger 这些同步类简化了
编码操作，而用 wait 和 notify 很难实现对复杂控制流的控制。其次，这些类是由最好的企
业编写和维护在后续的 JDK 中它们还会不断优化和完善，使用这些更高等级的同步工具你
的程序可以不费吹灰之力获得优化。
多用并发集合少用同步集合
这是另外一个容易遵循且受益巨大的最佳实践， 并发集合比同步集合的可扩展性更好， 所以
在并发编程时使用并发集合效果更好。如果下一次你需要用到 map ，你应该首先想到用
ConcurrentHashMap 。我的文章 Java 并发集合 有更详细的说明。