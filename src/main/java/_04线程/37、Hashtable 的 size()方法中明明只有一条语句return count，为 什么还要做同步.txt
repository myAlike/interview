37、Hashtable 的 size()方法中明明只有一条语句"return count"，为 什么还要做同步？
这是我之前的一个困惑，不知道大家有没有想过这个问题。某个方法中如果有 多条语句，并且都在操作同一个类变量，那么在多线程环境下不加锁，势必会 引发线程安全问题，这很好理解，但是 size()方法明明只有一条语句，为什么 还要加锁？ 关于这个问题，在慢慢地工作、学习中，有了理解，主要原因有两点： 1）同一时间只能有一条线程执行固定类的同步方法，但是对于类的非同步方 法， 可以多条线程同时访问 。所以，这样就有问题了，可能线程 A 在执行 Hashtable 的 put 方法添加数据，线程 B 则可以正常调用 size()方法读取 Hashtable 中当前元素的个数，那读取到的值可能不是最新的，可能线程 A 添加了完了数据，但是没有对 size++，线程 B 就已经读取 size 了，那么对 于线程 B 来说读取到的 size 一定是不准确的。而给 size()方法加了同步之后，
意味着线程 B 调用 size()方法只有在线程 A 调用 put 方法完毕之后才可以调 用，这样就保证了线程安全性
2）CPU 执行代码，执行的不是 Java 代码，这点很关键，一定得记住 。Java 代码最终是被翻译成机器码执行的，机器码才是真正可以和硬件电路交互的代 码。即使你看到 Java 代码只有一行，甚至你看到 Java 代码编译之后生成的 字节码也只有一行，也不意味着对于底层来说这句语句的操作只有一个。一句 "return count"假设被翻译成了三句汇编语句执行，一句汇编语句和其机器码 做对应，完全可能执行完第一句，线程就切换了。