34、什么是 AQS

简单说一下 AQS，AQS 全称为 AbstractQueuedSychronizer，翻译过来应 该是抽象队列同步器。
如果说 java.util.concurrent 的基础是 CAS 的话，那么 AQS 就是整个 Java 并发包的核心了，ReentrantLock、CountDownLatch、Semaphore 等等 都用到了它。 AQS 实际上以双向队列的形式连接所有的 Entry，比方说 ReentrantLock，所有等待的线程都被放在一个 Entry 中并连成双向队列， 前面一个线程使用 ReentrantLock 好了，则双向队列实际上的第一个 Entry 开始运行。
AQS 定义了对双向队列所有的操作，而只开放了 tryLock 和 tryRelease 方 法给开发者使用，开发者可以根据自己的实现重写 tryLock 和 tryRelease 方 法，以实现自己的并发功能。


问题二：那么请谈谈AQS框架是怎么回事儿？

AQS（AbstractQueuedSynchronizer类）是一个用来构建锁和同步器的框架，各种Lock包中的锁（常用的有ReentrantLock、ReadWriteLock），以及其他如Semaphore、CountDownLatch，甚至是早期的FutureTask等，都是基于AQS来构建。
1.AQS在内部定义了一个volatileintstate变量，表示同步状态：当线程
调用lock方法时，如果state=0，说明没有任何线程占有共享资源的锁，可以获得锁并将state=1；如果state=1，则说明有线程目前正在使用共享变量，其他线程必须加入同步队列进行等待。
2.AQS通过Node内部类构成的一个双向链表结构的同步队列，来完成线程获取锁的排队工作，当有线程获取锁失败后，就被添加到队列末尾。
oNode类是对要访问同步代码的线程的封装，包含了线程本身及其状态叫waitStatus（有五种不同取值，分别表示是否被阻塞，是否等待唤醒，是否已经被取消等），每个Node结点关联其prev结点和next结点，方便线程释放锁后快速唤醒下一个在等待的线程，是一个FIFO的过程。
oNode类有两个常量，SHARED和EXCLUSIVE，分别代表共享模式和独占模式。所谓共享模式是一个锁允许多条线程同时操作（信号量Semaphore就是基于AQS的共享模式实现的），独占模式是同一个时间段只能有一个线程对共享资源进行操作，多余的请求线程需要排队等待
（如ReentranLock）。

3.AQS通过内部类ConditionObject构建等待队列（可有多个），当Condition调用wait()方法后，线程将会加入等待队列中，而当
Condition调用	signal()方法后，线程将从等待队列转移动同步队列中进行锁竞争。
4.AQS	和	Condition	各自维护了不同的队列，在使用	Lock	和
Condition的时候，其实就是两个队列的互相移动。



