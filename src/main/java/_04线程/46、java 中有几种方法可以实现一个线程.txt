46、java 中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和 suspend()方法为何不推荐使用？

java5以前，有如下两种：
第一种：
new Thread(){}.start();这表示调用 Thread 子类对象的 run 方法，new Thread(){}表示一个
Thread 的匿名子类的实例对象，子类加上 run 方法后的代码如下：
new Thread() {
	public void run() {
	}
}.start();
第二种：
new Thread(new Runnable(){}).start();这表示调用 Thread 对象接受的 Runnable 对象的 run
方法，new Runnable(){}表示一个 Runnable 的匿名子类的实例对象,runnable 的子类加上
run 方法后的代码如下：
new Thread(new Runnable() {
	public void run() {
	}
}).start();

从 java5开始，还有如下一些线程池创建多线程的方式：
ExecutorService pool = Executors.newFixedThreadPool(3);
for (int i = 0; i < 10; i++) {
	pool.execute(new Runnable() {
		public void run() {}
	});
}
Executors.newCachedThreadPool().execute(new Runnable() {public void run() {}});
Executors.newSingleThreadExecutor().execute(new Runnable() {public void run() {}});


有两种实现方法，分别使用 new Thread()和 new Thread(runnable)形式，第一种直接调用
thread 的 run 方法，所以，我们往往使用 Thread 子类，即 new SubThread()。第二种调用
runnable 的 run 方法。

有两种实现方法，分别是继承 Thread 类与实现 Runnable 接口
用 synchronized 关键字修饰同步方法
反对使用 stop()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一
种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题
所在。suspend()方法容易发生死锁。调用 suspend()的时候，目标线程会停下来，但却仍
然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被"挂起"的
线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定
的资源，就会造成死锁。所以不应该使用 suspend()，而应在自己的 Thread 类中置入一个
标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用 wait()命其进入等待状
态。若标志指出线程应当恢复，则用一个 notify()重新启动线程。