47、sleep()和 wait()有什么区别?
 （网上的答案：sleep 是线程类（Thread）的方法，导致此线程暂停执行指定时间，
给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用 sleep 不会释放对象锁。 wait 是 Object 类的方法，对此对象调用 wait 方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出 notify 方法（或 notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。）

sleep 就是正在执行的线程主动让出 cpu，cpu 去执行其他线程，在 sleep 指定的时间过后，
cpu 才会回到这个线程上继续往下执行，如果当前线程进入了同步锁，sleep 方法并不会释
放锁，即使当前线程使用 sleep 方法让出了 cpu，但其他被同步锁挡住了的线程也无法得到执行。wait 是指在一个已经进入了同步锁的线程内，让自己暂时让出同步锁，以便其他正在等待此锁的线程可以得到同步锁并运行，只有其他线程调用了 notify 方法（notify 并不释放锁，只是告诉调用过 wait 方法的线程可以去参与获得锁的竞争了，但不是马上得到锁，因为锁还在别人手里，别人还没释放。如果 notify 方法后面的代码还有很多，需要这些代码执行完后才会释放锁，可以在 notfiy 方法后增加一个等待和一些代码，看看效果），调用 wait方法的线程就会解除 wait 状态和程序可以再次得到锁后继续向下运行。对于 wait 的讲解一定要配合例子代码来说明，才显得自己真明白。
public class MultiThread {
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		new Thread(new Thread1()).start();
		try {
			Thread.sleep(10);
		} catch (InterruptedException e) {
			// TODO Auto-generated catchblock
			e.printStackTrace();
		}
		new Thread(new Thread2()).start();
	}
	private static class Thread1 implements Runnable {
		@Override
		public void run() {
			// TODO Auto-generated methodstub
			// 由于这里的 Thread1和下面的 Thread2内部 run 方法要用同一对象作为监视器，我们这里不能用 this，因为在
			// Thread2里面的 this
			// 和这个 Thread1的 this 不是同一个对象。我们用MultiThread.class
			// 这个字节码对象，当前虚拟机里引用这个变量时，指向的都是同一个对象。
			synchronized (MultiThread.class) {
				System.out.println("enterthread1...");
				System.out.println("thread1is waiting");
				try {
					// 释放锁有两种方式，第一种方式是程序自然离开监视器的范围，也就是离开
					// 了 synchronized 关键字管辖的代码范围，另一种方式就是在 synchronized 关键字管辖的代
					// 码内部调用监视器对象的 wait 方法。这里，使用 wait 方法释放锁。
					MultiThread.class.wait();
				} catch (InterruptedException e) {
					// TODO Auto-generatedcatch block
					e.printStackTrace();
				}
				System.out.println("thread1is going on...");
				System.out.println("thread1is being over!");
			}
		}

	}
	private static class Thread2 implements Runnable {
		@Override
		public void run() {
			// TODO Auto-generated methodstub
			synchronized (MultiThread.class) {
				System.out.println("enterthread2...");
				System.out.println("thread2notify other thread can release wait status..");
				// 由于 notify 方法并不释放锁，即使 thread2调用下面的 sleep 方法休息了10毫秒，但 thread1
				// 仍然不会执行，因为 thread2没有释放锁，所以 Thread1无法得不到锁。
				MultiThread.class.notify();

				System.out.println("thread2is sleeping ten millisecond...");
				try {
					Thread.sleep(10);
				} catch (InterruptedException e) {
					// TODO Auto-generatedcatch block
					e.printStackTrace();
				}
				System.out.println("thread2is going on...");
				System.out.println("thread2is being over!");
			}
		}
	}
}





通常会在电话面试中经常被问到的 Java 线程面试问题。最大的不同是在等待时 wait 会释放 锁，而 sleep 一直持有锁。Wait 通常被用于线程间交互，sleep 通常被用于暂停执行。



这个问题常问，sleep 方法和 wait 方法都可以用来放弃 CPU 一定的时间，不 同点在于如果线程持有某个对象的监视器，sleep 方法不会放弃这个对象的监 视器，wait 方法会放弃这个对象的监视器